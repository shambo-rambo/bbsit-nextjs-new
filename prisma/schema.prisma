datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Family {
  id                  String              @id @default(cuid())
  image               String?
  name                String
  homeAddress         String
  members             User[]
  children            Child[]
  groups              Group[]             @relation("GroupMembers")
  adminOfGroups       Group[]             @relation("GroupAdmin")
  points              Int                 @default(0)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  invitations         Invitation[]
  groupPoints         FamilyGroupPoints[]
  participatingEvents Event[]             @relation("ParticipatingEvents")
  createdEvents       Event[]             @relation("CreatedEvents")
  currentAdminId      String?
  adminId             String?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String // e.g., 'group_invitation', 'event_creation', 'point_transaction'
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  linkedId  String?
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  family        Family?        @relation(fields: [familyId], references: [id])
  familyId      String?
  isAdmin       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]

  @@index([email])
}

model Child {
  id        String   @id @default(cuid())
  name      String
  family    Family   @relation(fields: [familyId], references: [id])
  familyId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id              String   @id @default(cuid())
  inviterFamilyId String
  inviterFamily   Family   @relation(fields: [inviterFamilyId], references: [id])
  inviteeEmail    String
  groupId         String?
  group           Group?   @relation(fields: [groupId], references: [id])
  status          String // e.g., 'pending', 'accepted', 'declined'
  expirationDate  DateTime
  createdAt       DateTime @default(now())

  @@index([inviteeEmail])
}

model Group {
  id           String              @id @default(cuid())
  name         String
  description  String?
  adminId      String
  admin        Family              @relation("GroupAdmin", fields: [adminId], references: [id])
  members      Family[]            @relation("GroupMembers")
  events       Event[]
  invitations  Invitation[]
  inviteCode   String              @unique
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  familyPoints FamilyGroupPoints[]
}

model Event {
  id              String   @id @default(cuid())
  name            String
  description     String?
  startTime       DateTime
  endTime         DateTime
  points          Int
  familyId        String
  family          Family   @relation("ParticipatingEvents", fields: [familyId], references: [id])
  groupId         String
  group           Group    @relation(fields: [groupId], references: [id])
  status          EventStatus // Updated to use enum
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creatorFamilyId String
  creatorFamily   Family?   @relation("CreatedEvents", fields: [creatorFamilyId], references: [id])
  rejectedFamilies String[] @default([])
  acceptedByName    String?
}

enum EventStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
  PAST
}

model FamilyGroupPoints {
  id        String   @id @default(cuid())
  familyId  String
  family    Family   @relation(fields: [familyId], references: [id])
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([familyId, groupId])
}
